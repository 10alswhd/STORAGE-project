/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package sorting;

import java.util.Random;
import java.util.concurrent.Callable;



public class Sorting {

    private static int[] createRandomData(int num){
        int[] randomNumber = new int[num]; //make an array lists with the random number
        Random rand;
        rand = new Random();
        for (int i = 0; i<num; i++ ){  //for loops for the array
            randomNumber[i]= rand.nextInt(num);   //method to fill the array
        }
        return randomNumber;

    }

    static long bubbleSort(int[] arr){
        int[]a = arr.clone();  //deep copy the array to refresh
        long startTime = System.currentTimeMillis(); //start time in counting the data
        for(int i=a.length-1;i>0;i--){
            for(int j=0;j<i;j++){
                if(a[j]>a[j+1]){
                    a[j]=a[j]+a[j+1];
                    a[j+1]=a[j]-a[j+1];
                    a[j]=a[j]-a[j+1];
                }
            }
        }
        long endTime = System.currentTimeMillis();   //timer off
        return endTime - startTime; //final count by subtracting them
    }

    private static long selectionSort(int[] arr){ //selection sort method
        int[]a = arr.clone();  //deep copy the array to refresh
        long startTime = System.currentTimeMillis(); //start time in counting the data
        for(int i=0;i<a.length;i++){
            int min = a[i];
            int min_idx = i;
            for(int j=i+1;j<a.length;j++){
                if(a[j]<min){
                    min = a[j];
                    min_idx = j;
                }
            }
            if(min_idx!=i){
                a[min_idx]=a[i];
                a[i]=min;
            }
        }
        long endTime = System.currentTimeMillis();   //timer off
        return endTime - startTime; //final count by subtracting them
    }

    private static long insertionSort(int[] arr){  //insertion sort method
        int[]a = arr.clone();  //deep copy the array to refresh
        long startTime = System.currentTimeMillis();
        for(int i=1;i<a.length;i++){
            int curr=a[i];
            int j=i;
            while(j>0 && curr<a[j-1]){
                a[j]=a[j-1];
                j--;
            }
            a[j]=curr;
        }
        long endTime = System.currentTimeMillis();   //timer off
        return endTime - startTime; //final count by subtracting them
    }

    private static int[] merge(int[] a){    //merge sort method
        if(a.length<=1)
            return a;

        int[] left = new int[a.length / 2];
        int[] right = new int[a.length-left.length];
        for(int i=0;i<left.length;i++)
            left[i]=a[i];
        for(int i=0;i<right.length;i++)
            right[i]=a[i+left.length];

        left = merge(left);
        right = merge(right);

        for(int i=0, l=0, r=0;i<a.length;i++)
            a[i] = (r>=right.length) || (l<left.length && left[l]<right[r]) ? left[l++] : right[r++];
        return a;
    }

    private static long mergeSort(int[] arr){
        int[]a = arr.clone();  //deep copy the array to refresh

        long startTime = System.currentTimeMillis();
        merge(a);
        long endTime = System.currentTimeMillis();   //timer off
        return endTime - startTime; //final count by subtracting them

    }

    private int[] numbers;
    private int number;

    private long quickSort(int[] values) {
        this.numbers = values.clone();
        number = values.length;
        long startTime = System.currentTimeMillis();
        sort(0, number - 1);
        long endTime = System.currentTimeMillis();   //timer off
        return endTime - startTime; //final count by subtracting them
    }

    private void sort(int low, int high) {
        int i = low, j = high;
        // Get the pivot element from the middle of the list
        int pivot = numbers[low + (high-low)/2];

        // Divide into two lists
        while (i <= j) {
            while (numbers[i] < pivot) {
                i++;
            }
            while (numbers[j] > pivot) {
                j--;
            }

            if (i <= j) {
                exchange(i, j);
                i++;
                j--;
            }
        }
        // Recursion
        if (low < j)
            sort(low, j);
        if (i < high)
            sort(i, high);
    }

    private void exchange(int i, int j) {
        int temp = numbers[i];
        numbers[i] = numbers[j];
        numbers[j] = temp;
    }



   public static void main(String[] args) {
       int[] data_set = {1, 2, 10, 20, 100};
       long bubble = 0;
       long selection;
       long insertion;
       long merge;
       long quick;
       for(int i: data_set){
           int len = i*10000;
           System.out.println("DATA LENGTH: "+len);

           int count = 0;
           int sum = 0;
           System.out.println("computing BUBBLE SORT");
           while(count<100 && bubble < 60000){
               System.out.print('.');
               bubble = Sorting.bubbleSort(createRandomData(len));
               sum += bubble;
               count ++;
               if(bubble>60000) break;
           }
           System.out.print("DONE\n");

           if(bubble < 60000) {
               System.out.println("Average run time "+sum/count + " ms");
            }
           else{
               System.out.println("Average runtime is OVER than 1 minute");
           }

//           selection  = Sorting.selectionSort(randomData);
//           System.out.println("Selection Sort: "+selection + " ms");
//
//           insertion = Sorting.insertionSort(randomData);
//           System.out.println("Insertion Sort: "+insertion + " ms");
//
//           merge = Sorting.mergeSort(randomData);
//           System.out.println("Merge Sort: "+merge + "ms");
//
//           Sorting sort = new Sorting();
//           quick = sort.quickSort(randomData);
//           System.out.println("Quick Sort: "+quick + "ms");


           System.out.println("\n");


       }
    }




}
