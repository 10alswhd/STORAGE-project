1 //############################# 2 // Sudoku Oyunu 3 // 021212 4 // selimssevgi@gmail.com 5 //############################# 67 #include <stdio.h>8 #include <stdlib.h>9 #include <time.h>1011 #define N 91213 int searchValue(int *row, int value) { 14  int i; 15  16  for (i = 0; i<N; i++) {  17   if (row[i] == value) {   18     return 0;   19  }  20 } 21  22  return 1; 23}2425 void printMatrix(int **matrix) { 26  int i, j; 27  28   printf("\n     1   2   3   4   5   6   7   8   9"); 29  for (i = 0; i<N; i++) {  30   printf("\n  --------------------------------------\n%d |  ", i + 1);  31   for (j = 0; j<N; j++) {   32    printf("%d   ", matrix[i][j]);   33  }  34 } 35  printf("\n  --------------------------------------\n"); 36}3738 int searchValueInSquare(int **sudoku, int value, int* square) { 39  int i, j; 40  41   for (i = square[0]; i <= square[1]; i++) {  42    for (j = square[2]; j <= square[3]; j++) {   43     if (value == sudoku[i][j]) {    44      return 0;    45   }   46  }  47 } 48  49  return 1; 50}5152 int** allocateMatrix() { 53  int i; 54  int **matrix; 55  56  // userSudoku ve sudoku icin calloc ile yer ayirip sifirliyoruz   57  matrix = (int**)calloc(N, sizeof(int*)); 58  if (matrix == NULL) { printf("HATA: Bellek alikasyonu basarisiz!"); exit(0); } 59  for (i = 0; i<N; i++) {  60   matrix[i] = (int*)calloc(N, sizeof(int));  61   if (matrix[i] == NULL) { printf("HATA: Bellek alikasyonu basarisiz!"); exit(0); }  62 } 63  64  return matrix; 65}6667 void printMenu(int *op) { 68  do {  69   printf("\n        OYUN MENUSU");  70   printf("\n        ------------");  71   printf("\n 1 - Sayi Yaz");  72   printf("\n 2 - Sayi Sil");  73   printf("\n 3 - Yeni Oyun");  74   printf("\n 4 - Nasil Oynanir?");  75   printf("\n 5 - Oynamak Istemiyorum - Cikis\n");  76   77   printf("\nYapmak istediginiz islem > ");  78   scanf("%d", op);  79 } while (*op<1 || *op>5);  80}8182 void howToPlay() { 83  printf("\n\n SUDOKU NASIL OYNANIR\n"); 84  printf(" ---------------------"); 85  printf("\n # 9 satir ve sutundan olusan karede, 1-9 arasindaki sayilar"); 86  printf("\nayni satirda ve aynı sutunda tekrar etmemeli.\n"); 87  printf("\n # Ayrica buyuk kare icerisinde olusan 3x3luk 9 karecik"); 88  printf("\nicerisinde de 1-9 arasindaki sayilar birer kere kullanilmali.\n"); 89  printf("\nDevam etmek icin bir tusa basiniz > "); 90  getchar(); 91  getchar(); 92}9394 void koordinatlariAl(int *row, int *col) { 95  do {  96   printf("\nKoordinatlar 1-9 arasinda olmali(dahil)\n");  97   printf("Satir > ");  98   scanf("%d", row);  99   printf("Sutun > ");  100   scanf("%d", col);  101 } while ((*row>9 || *row<1) || (*col<1 || *col>9));  102   103  // Matrislerimiz 0 dan basladigi icin birer azaltalim    104  (*row)--;  105  (*col)--;  106}107108 int cmp(int** sudoku, int **userSudoku) { 109  int i, j; 110  111  for (i = 0; i<N; i++) {  112   for (j = 0; j<N; j++) {   113    if (sudoku[i][j] != userSudoku[i][j]) {    114     return 0; // yanlis cozmus     115   }   116  }  117 } 118  return 1; // dogru cozmus  119}120121 int main() { 122  int **sudoku; 123  int **userSudoku; 124  int domain[9][2]; 125  int squares[9][4] = { { 0,2,0,2 },  126        {3,5,0,2},  127        {6,8,0,2},  128        {0,2,3,5},  129        {3,5,3,5},  130        {6,8,3,5},  131        {0,2,6,8},  132        {3,5,6,8},  133        {6,8,6,8},  134 }; 135  int i, j, k, z; 136  int index; 137  int squareIndex; 138  int times = 0; 139  int operation; 140  int row, col; 141  int numberOfInput = 20; // 81 karenin 20 sini onceden girip kullanicaya sunuyoruz.  142  143  // Rastgele degerlerin program her calistiginda farkli olmasi icin   144  srand(time(NULL)); 145  146  // 9x9 luk kareler icin yer ayir.   147  sudoku = allocateMatrix(); 148  userSudoku = allocateMatrix(); 149  150  // Sudoku da 1-9 arasi sayilar olacak.Onlari dizinin 1.satirina yerleştirelim.   151  // 2.satirda ise sayinin o anki sudoku sutununda kullanılıp kullanılmadıgı degerini tutacak   152  // kullanildi = 1, kullanilmamis=0   153  for (i = 0; i<9; i++) {  154   domain[i][0] = i + 1;  155   domain[i][1] = 0;  156 } 157  158  // Sudokunun olusturulmasi.   159  j = 0; 160  i = 0; 161  while (j != N) { // counter of columns    162   163   if (i == 100) {   164    // break ile cikmis     165    j--; // break ile ciktigimiz icin en alta j arti.Silecegimiz sutun bir onceki olmali.    166    167    for (z = 0; z<N; z++) {    168     sudoku[z][j] = 0;    169   }   170  }  171   172   // domain 2.satirini sıfırla    173   for (k = 0; k<N; k++) {   174    domain[k][1] = 0;   175  }  176   177   times = 0;  178   i = 0;  179   180   while (i != N) {   181    // Eğer 100 kerede sayi bulunmamissa ters giden bir seyler var.O sutuna sayilari bastan yerlestirecez.       182    if (times > 100) {    183     i = 100;    184     break;    185   }   186    187    index = rand() % 9; // for domain index [0-8]    188    189    // Gelen sayi daha onceden o sutunda kullanilmis mi?     190    if (domain[index][1] == 1) {    191     continue;    192   }   193    // Sayinin yerlestirilemediği basarisiz olunan durum sayisi     194    times++;   195    196    // Gelen sayi o anki satirda kullanilmis mi?     197    if (!(searchValue(sudoku[i], domain[index][0]))) {    198     continue;    199   }   200    201    // satir(i) ve sutun(j) durumuna gore o an 9 kucukkareden olusan karelerden hangisindeyiz?      202    if (i<3) {    203     if (j<3) {     204      squareIndex = 0;     205    }    else if (j<6) {     206      squareIndex = 3;     207    }    else {     208      squareIndex = 6;     209    }    210   }    else if (i<6) {     211     if (j<3) {      212      squareIndex = 1;      213     }     else if (j<6) {      214      squareIndex = 4;      215     }     else {      216      squareIndex = 7;      217     }     218    }    else {     219     if (j<3) {      220      squareIndex = 2;      221     }     else if (j<6) {      222      squareIndex = 5;      223     }     else {      224      squareIndex = 8;      225     }     226    }    227    // Secilen sayi o anki 9 lu hucrenin icinde var mı?      228    if (!(searchValueInSquare(sudoku, domain[index][0], squares[squareIndex]))) {     229     continue;     230    }    231     232    sudoku[i][j] = domain[index][0];    233    times = 0;    234    domain[index][1] = 1;    235    i++;    236  } // i while nın sonu     237   j++;  238 } // j while nın sonu  239  240  241  // Kullaniciya gosterecegimiz sudoku da bazı elemanlari onceden yerlestirmemiz lazım   242  // 15 tane yerlestirelim.   243  i = 0; 244  while (i != 20) {  245   row = rand() % 9;  246   col = rand() % 9;  247   248   if (userSudoku[row][col] == 0) {   249    userSudoku[row][col] = sudoku[row][col];   250    i++;   251  }  252   253 } 254  255  printf("\n Sudoku olusturuldu!\n"); 256  do {  257   258   printMatrix(userSudoku);  259   printf("\n");  260   printMenu(&operation);  261   262   switch (operation) {   263    case 1: // Sayi gir     264     koordinatlariAl(&row, &col);    265     if (userSudoku[row][col] != 0) {     266      printf("\nHATA : Istedigimiz bolgede zaten deger var!\n");     267    }    else {     268      int deger;     269      do {      270       printf("\n[%d, %d] bolgesine yazacaginiz deger [1-9]> ", row + 1, col + 1);      271       scanf("%d", &deger);      272     } while (deger>9 || deger<0);      273      userSudoku[row][col] = deger;      274      numberOfInput++;      275      printf("\nIstediginiz bolgeye istediginiz deger yazildi.\n");      276    }    277    break;    278    case 2: // Sayi sil      279     koordinatlariAl(&row, &col);     280     if (userSudoku[row][col] == 0) {      281      printf("\nHATA : Istedigimiz bolgede zaten deger yok!\n");      282     }     else {      283      userSudoku[row][col] = 0;      284      numberOfInput--;      285      printf("\nIstediginiz bolgedeki deger silindi!\n");      286     }     287    break;     288    case 3: // Yeni oyun       289     printf("\nYeni oyun icin programi kapatip tekrar acin :) \n");      290     return 0;      291    break;      292    case 4: // Nasil oynanir        293     howToPlay();       294    break;       295    case 5: // cikis         296     printf("Exiting....");        297    break;        298    // default a gerek yok.Gerekli kontrol printmenu fonk. yapildi.          299  }  300 } while (operation != 5 || numberOfInput != 81);  301   302  if (numberOfInput == 81) {   303   // Kullanici sudokuyu tamamlamis bakalim dogru mu?     304   if (cmp(sudoku, userSudoku)) {    305    printf("\nTEBRIKLER! Sudokuyu basariyla cozdünüz!\n");    306   }    else {     307    printf("\nMalesef! Cozumunuzde yanlisliklar var!\n");     308    }    309  }  310   311  free(sudoku);  312  free(userSudoku);  313  return 0;  31
