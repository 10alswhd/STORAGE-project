#include <stdio.h>#include <stdlib.h>#include <string.h>#include <time.h>#include "mtg.h"// 상수 정의#define MAX_LEN 30#define MAX_X 50#define MAX_Y 20#define MAX_WORD 100// 키보드 입력 키 값#define KEY_F4 62#define KEY_ENTER 13#define KEY_BACKSPACE 8typedef struct { char word[MAX_LEN]; // 떨어지는 내용 int x; int y; int index;} S_WORD;//전역변수int max_words_size = 0;char words[MAX_WORD][MAX_LEN];S_WORD g_word;S_WORD g_key;int g_play;int g_score;// 함수 선언부int LoadWords();int GetNextWord();void ShowHelp();void ShowScore();void ShowInput();void ShowWord();void RunTimer();int CheckGameover();int GetNextWord(){ if (max_words_size <= g_word.index)  return -1; else {  g_word.x = rand() % MAX_X;  g_word.y = 1; } strcpy(g_word.word, words[g_word.index]); g_word.index++; return 0;}int LoadWords(){ int index; char temp[80]; FILE * fp; char * token; fp = fopen("word.txt", "r"); if (NULL == fp)  return 0; index = 0; while (1) {  if (NULL == fgets(temp, sizeof(temp), fp))   break;  token = strtok(temp, ",");  while (1) {   strcpy(words[index], token);   index++;   token = strtok(NULL, ",");   if (NULL == token)    break;  } } max_words_size = index; fclose(fp);}void ShowScore(){ char temp[20]; sprintf(temp, "score:%d", g_score); _DrawText(0, 0, temp);}void ShowHelp(){ _DrawText(MAX_X + 10, 10, "산성비 ver 0.1"); _DrawText(MAX_X + 10, 11, "F4 : EXIT");}void ShowWord(){ _DrawText(g_word.x, g_word.y, g_word.word);}void ShowInput(){ _DrawText(g_key.x, g_key.y, g_key.word);}void Draw(){ ShowHelp(); ShowWord(); ShowInput(); ShowScore();}void RunIni(){ if (-1 == LoadWords())  _MessageBox(0, 0, 30, 20, "File Load Error"); srand((unsigned)time(NULL)); GetNextWord(); g_word.index = 0; g_key.x = 10; g_key.y = MAX_Y + 1; g_key.word[0] = '\0'; _Invalidate();}int RunKey(){ char k; k = _GetKey(); switch (k) { case -1:  return 0; case KEY_F4:  return -1; case KEY_ENTER:  if (0 == strcmp(g_key.word, g_word.word)) {   g_score += 100;   if (-1 == GetNextWord()) {    g_play = -1;    return 0;   }  }  g_key.index = 0;  g_key.word[g_key.index] = '\0';  break; case KEY_BACKSPACE:  g_key.index--;  if (g_key.index<0)   g_key.index = 0;  g_key.word[g_key.index] = '\0';  break; default:  g_key.word[g_key.index++] = k;  g_key.word[g_key.index] = '\0';  break; } _Invalidate(); return 0;}void RunTimer(){ static long oldT = 0; long newT; if (-1 == g_play) return; newT = _GetTickCount(); if (abs(newT - oldT)<1000)  return; else  oldT = newT; if (MAX_Y<g_word.y + 1) {  if (-1 == GetNextWord())   g_play = -1; } else  g_word.y++; _Invalidate();}int CheckGameOver(){ if (-1 == g_play) {  _Invalidate();  _MessageBox(0, 3, 20, 5, "Game Over!");  return -1; } return 0;}void GameMain(){ RunIni(); while (1) {  RunTimer();  if (-1 == CheckGameOver())   break;  if (-1 == RunKey())   break; }}int main(){ _BeginWindow(); GameMain(); _EndWindow(); return 0;}
