 #include <stdlib.h> 2 #include <stdio.h> 3  4 #include <bluetooth/bluetooth.h> 5  6 #include <SDL/SDL.h> 7 #include <SDL/SDL_ttf.h> 8  9 #include <cwiid.h> 10  11 // Constants 12 #define S_WIDTH  800 13 #define S_HEIGHT 600 14 #define S_BPP    32 15 #define S_FLAGS  SDL_HWSURFACE | SDL_DOUBLEBUF 16 #define X_MAX    1000 17 #define Y_MAX    750 18  19 // Macros 20 #define toggle_bit(bf,b) \ 21   (bf) = ((bf) & b) ? ((bf) & ~(b)) : ((bf) | (b)) 22  23 // Structures definition 24 typedef enum AppState AppState; 25 enum AppState 26   { 27     PAIRING, DISPLAY, EXIT 28   }; 29  30 // Prototypes 31  32  33 int main( int argc, char** argv ) 34 { 35   // Variables definition 36   int wiimote_paired = 0; 37   int x = -1; 38   int y = -1; 39   int batt = 0; 40   char big_msg[256]; 41   char small_msg[256]; 42   unsigned char rumble = 0; 43   unsigned char rpt_mode = 0; 44   SDL_Surface* screen = NULL; 45   SDL_Event event; 46   SDL_Rect big_position, small_position; 47   SDL_Surface* big_text = NULL; 48   SDL_Surface* small_text = NULL; 49   TTF_Font* big_font = NULL; 50   TTF_Font* small_font = NULL; 51   AppState appstate = PAIRING; 52   cwiid_wiimote_t* wiimote; 53   bdaddr_t bdaddr = *BDADDR_ANY; 54   struct cwiid_state state; 55   SDL_Color white = {0,0,0}; 56   SDL_Rect dot; 57  58   // Variables initialisation 59   big_position.x = 180; 60   big_position.y = 250; 61   small_position.x = 300; 62   small_position.y = 50; 63  64   // SDL and SDL_TTF initialization 65   if( SDL_Init( SDL_INIT_VIDEO | SDL_INIT_TIMER ) ) 66     { 67       fprintf( stderr, "Error while initializing SDL: %s\n", SDL_GetError() ); 68       exit( EXIT_FAILURE ); 69     } 70   if( TTF_Init() ) 71     { 72      fprintf( stderr, "Error while initializing SDL_TTF: %s\n", TTF_GetError() ); 73      exit( EXIT_FAILURE ); 74     } 75  76   // Resources loading 77   big_font = TTF_OpenFont( "gratis.ttf", 35 ); 78   if( big_font == NULL ) 79     { 80       fprintf( stderr, "Error while loading font: %s\n", TTF_GetError() ); 81       exit( EXIT_FAILURE ); 82     } 83   small_font = TTF_OpenFont( "gratis.ttf", 15 ); 84   if( small_font == NULL ) 85     { 86       fprintf( stderr, "Error while loading font: %s\n", TTF_GetError() ); 87       exit( EXIT_FAILURE ); 88     } 89  90   // Main window creation 91   screen = SDL_SetVideoMode( S_WIDTH, S_HEIGHT, S_BPP, S_FLAGS ); 92   SDL_WM_SetCaption( "Wiimote pointer display", NULL ); 93  94   // Pair with the wiimote and rumble to notify 95   printf( "Trying to pair with the wiimote now.\nPut the wiimote in search mode (press 1+2) ...\n" ); 96   if( wiimote = cwiid_open( &bdaddr, 0 ) ) 97     { 98       wiimote_paired = 1; 99       appstate = DISPLAY; 100       toggle_bit( rumble, 0x01 ); 101       cwiid_set_rumble( wiimote, rumble ); 102       usleep( 300000 ); 103       toggle_bit( rumble, 0x01 ); 104       cwiid_set_rumble( wiimote, rumble ); 105       // toggle IR reporting ON 106       toggle_bit( rpt_mode, 0x08 ); 107       cwiid_set_rpt_mode( wiimote, rpt_mode ); 108     } 109  110   // Main loop 111   while( appstate != EXIT ) 112     { 113       // Take care of events if there is any 114       if( SDL_PollEvent( &event ) ) 115  { 116    switch( event.type ) 117      { 118      case SDL_QUIT: 119        appstate = EXIT; 120        break; 121       122      case SDL_KEYDOWN: 123        if( event.key.keysym.sym == SDLK_ESCAPE ) 124   appstate = EXIT; 125        break; 126     127      } 128  } 129  130       // Query the wiimote 131       if( appstate == DISPLAY ) 132  { 133    cwiid_get_state( wiimote, &state ); 134    if( state.ir_src[0].valid ) 135      { 136        SDL_FillRect( screen, NULL, SDL_MapRGB( screen->format, 0, 255, 0 ) ); 137        x = state.ir_src[0].pos[0]; 138        y = state.ir_src[0].pos[1]; 139      } 140    else 141      { 142        SDL_FillRect( screen, NULL, SDL_MapRGB( screen->format, 255, 0, 0 ) ); 143      } 144    batt = (int)(100.0 * state.battery / 0xD0); 145    //   sprintf( big_msg, "IR source position: (%d,%d)", x, y ); 146    dot.x = (int) (x * S_WIDTH) / X_MAX; 147    dot.y = (int) (y * S_HEIGHT) / Y_MAX; 148    dot.w = 10; 149    dot.h = 10; 150    SDL_FillRect( screen, &dot, SDL_MapRGB( screen->format, 255, 255, 255) ); 151    sprintf( small_msg, "Battery remaining: %d%%", batt ); 152    //big_text = TTF_RenderText_Solid( big_font, big_msg, white ); 153    small_text = TTF_RenderText_Solid( small_font, small_msg, white ); 154    //SDL_BlitSurface( big_text, NULL, screen, &big_position ); 155    SDL_BlitSurface( small_text, NULL, screen, &small_position ); 156  } 157  158       // Render the screen 159       SDL_Flip( screen ); 160     } 161  162   // Free resources and exits sub-systems 163   TTF_CloseFont( big_font ); 164   TTF_CloseFont( small_font ); 165   TTF_Quit(); 166   if( wiimote_paired ) 167     cwiid_close( wiimote ); 168   else 169     fprintf( stderr, "No wiimotes could be found\n" ); 170   SDL_Quit(); 171    172   return EXIT_SUCCESS; 173 } 
